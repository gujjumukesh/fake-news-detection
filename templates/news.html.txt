from flask import Flask, request, render_template
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
import re

app = Flask(__name__, static_folder='static')

# Load the dataset
df = pd.read_csv(r"C:\Users\g.mukesh\Downloads\bbc\BBCNews.csv")

# Data preprocessing
def preprocess_text(text):
    text = text.lower()
    text = re.sub(r'[^\w\s]', '', text)
    return text

df['text'] = df['text'].apply(preprocess_text)

# Split the data
X = df['text']
y = df['label']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature extraction
vectorizer = TfidfVectorizer()
X_train_std = vectorizer.fit_transform(X_train)
X_test_std = vectorizer.transform(X_test)

# Model training
logi = LogisticRegression()
logi.fit(X_train_std, y_train)

# Prediction function
def predict_news(news):
    news_std = vectorizer.transform([news])
    prediction = logi.predict_proba(news_std)[0][1]  # Get the probability of the positive class
    if prediction != 0:  # Threshold for True News
        return "True News"
    else:
        return "Fake News"

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        news_article = request.form['news']
        news_article = preprocess_text(news_article)
        prediction = predict_news(news_article)
        return render_template('news.html', prediction=prediction, news_article=news_article)
    return render_template('news.html')

if __name__ == '__main__':
    app.run(debug=True)